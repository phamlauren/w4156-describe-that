<%= flash[:notice] %>
<h1 class="text-center page-title">Watch: <%=@yt_info["title"]%></h1>
<p class="text-center">
    <strong>Track ID: <%=@track.id%> | Author: <%= @track.author.username %></strong>
    <% if session[:userinfo].nil? %>
        | <%= link_to "Login to vote on this track", '/auth/auth0', method: :post %>
    <% else %>
        | <%= link_to "Vote on this track!", "/description_track/#{@track.id}/vote", method: :post, data: { turbolinks: 'false' } %>
    <% end %>
</p>

<div class="volume-container">
  <p>Description Track Volume</p>
  <input type="range" min="0" max="100" value="100" class="slider" id="volume">
</div>
<div class="text-center">
    <div id="player"></div>
</div>

<audio controls style="display: none" id="description-player" onEnded="onDescriptionEnd()">
  <source id="audio-source" src="#" type="audio/wav">
  Your browser does not support the audio element.
</audio>

<h3>Comments</h3>
<%= form_with(url: "/video/#{@track.video.id}/play/comment") do |f| %>
    <%= f.hidden_field :dtrack_id, :value => @track.id %>
    <div class="form-group">
    <%= f.label 'New comment' %>
    <%= f.text_area :comment_text, class: 'form-control' %>
    </div>
    <%= f.submit 'Post', method: :post, class: 'btn btn-primary' %>
<% end %>
<br>

<%= render @track.get_all_root_comments %>

<script>
    var tag = document.createElement("script");
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName("script")[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    const vid = "<%= @video.yt_video_id %>";

    // helpers
    let log = (s) => console.log(s);
    let id = (val) => document.getElementById(val);

    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player("player", {
            height: "390",
            width: "640",
            videoId: vid,
            events: {
                'onReady': onPlayerIsReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    let description_data = <%= @descriptions.to_json.html_safe %>;
    let description_player = id("description-player");

    const description_volume = id("volume");
    description_volume.oninput = function() {
        description_player.volume = this.value/100;
    }

    let audio_source = id("audio-source");

    let current_index = 0;
    let num_descriptions = description_data.length;
    let timeMonitoringIntervalID = null;

    let lastVolume = 100;
    let isPlayingDescription = false;

    // seek tracking
    let lastTime = -1;

    let onPlayerIsReady = (event) => {
        timeMonitoringIntervalID = setInterval(monitorTime, 100);
    }

    let onPlayerStateChange = (event) => {
        if (isPlayingDescription) {
            if (event.data == YT.PlayerState.PLAYING && description_data[current_index]["inline_extended"] === "extended") {
                player.pauseVideo();
            }

            if (event.data == YT.PlayerState.PAUSED && description_data[current_index]["inline_extended"] === "inline") {
                player.playVideo();
            }
        }
    }

    let monitorTime = () => {
        let t = player.getCurrentTime();

        // check for a seek
        if (lastTime != -1) {
            // a difference of over 500 ms counts as a seek
            if (Math.abs(t - lastTime) > 0.5) {
                // a seek occurred
                console.log("seek!");
                onSeek(t);
            }
        }
        lastTime = t;

        if (current_index >= num_descriptions) return;
        let current_description = description_data[current_index];

        if (lastTime > current_description["start_time_sec"]) {
            if (timeMonitoringIntervalID != null) clearInterval(timeMonitoringIntervalID);
            isPlayingDescription = true;
            triggerDescription();
        }
    }

    let onSeek = (current_time) => {
        for (let i = 0; i < description_data.length; i++) {
            let this_description = description_data[i];
            if (this_description["start_time_sec"] > current_time) {
                current_index = i;
                return;
            }
        }
        current_index = num_descriptions;
    }

    let triggerDescription = () => {
        let current_description = description_data[current_index];
        assignURLToAudioPlayer(current_description["url"]);

        if (current_description["inline_extended"] === "extended") {
            playExtendedDescription();
        } else if (current_description["inline_extended"] === "inline") {
            playInlineDescription();
        }
    }

    let assignURLToAudioPlayer = (url) => {
        audio_source.src = url;
        description_player.load();
    }

    let playExtendedDescription = () => {
        player.pauseVideo();
        description_player.play();
    }

    let playInlineDescription = () => {
        lastVolume = player.getVolume();
        player.setVolume(description_data[current_index].video_vol_inline);
        description_player.play();
    }

    let onDescriptionEnd = () => {
        let description_that_just_ended = description_data[current_index];
        current_index += 1;

        if (description_that_just_ended["inline_extended"] === "extended") {
            player.playVideo();
        } else if (description_that_just_ended["inline_extended"] === "inline") {
            player.setVolume(lastVolume);
        }

        isPlayingDescription = false;
        timeMonitoringIntervalID = setInterval(monitorTime, 100);
    }

</script>