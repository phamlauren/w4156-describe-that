<h1>Describe video</h1>
<%= form_with method: :post do |form| %>
  <%= form.text_area :time, size: "70x5" %>
  <%= form.text_area :description, size: "70x5" %>
  <div id="media-record-div">
    <%= button_tag "Get Rec Permission", type: 'button', onClick: 'recorder_button_click_event()', id: "toggle-recording-button", class: "btn-primary" %>
  </div>
  <%= form.submit "Submit" %>
<% end %>

<script>
    let log = console.log.bind(console),
        id = val => document.getElementById(val),
        stream,
        recorder,
        counter=1,
        chunks,
        media;

    let recorder_toggle_button = id("toggle-recording-button");
    let recording_div = id("media-record-div");
    let got_media_perms = false;
    let isRecording = false;
    let last_download_link = null;




    function recorder_button_click_event() {
        media = {
            tag: 'audio',
            type: 'audio/wav',
            ext: '.wav',
            gUM: {audio: true}
        }

        if (!got_media_perms) {
            navigator.mediaDevices.getUserMedia(media.gUM).then(_stream => {
                stream = _stream;
                recorder = new MediaRecorder(stream);
                recorder.ondataavailable = e => {
                    chunks.push(e.data);
                    if(recorder.state == 'inactive')  makeLink();
                };
                log('got media successfully');
                got_media_perms = true;
                recorder_toggle_button.textContent = "Record";
            }).catch(log);
        } else {
            // if NOW...
            if (isRecording) {
                // recorder_toggle_button.setAttribute('disabled', 'true');
                recorder_toggle_button.style.background = '#0000FF';
                recorder.stop();
                recorder_toggle_button.textContent = "Record";
            } else {
                // recorder_toggle_button.removeAttribute('disabled');
                recorder_toggle_button.style.background = '#FF0000';
                chunks = [];
                recorder.start();
                recorder_toggle_button.textContent = "Recording...";
            }
            isRecording = !isRecording;
        }
    }

    function makeLink(){
        let blob = new Blob(chunks, {type: media.type });
        let url = URL.createObjectURL(blob);
        let recordedMediaParent = window.document.createElement('span');
        let mt = window.document.createElement(media.tag);
        let hf = window.document.createElement('a');

        mt.controls = true;
        mt.src = url;
        hf.href = url;
        hf.download = `${counter++}${media.ext}`;
        hf.innerHTML = `download ${hf.download}`;

        recordedMediaParent.appendChild(mt);
        recordedMediaParent.appendChild(hf);
        if (last_download_link != null) {
            recording_div.removeChild(last_download_link);
        }
        recording_div.appendChild(recordedMediaParent);
        last_download_link = recordedMediaParent;
    }
</script>