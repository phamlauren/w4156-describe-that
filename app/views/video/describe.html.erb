<h1>Describe video: <%=@yt_info["title"]%></h1>
<p><strong>Track ID: <%=@track.id%> | Author: <%= @track.author.username %></strong></p>

<br>

<div id="player"></div>

<!-- Hidden description audio player. -->
<audio controls style="display: none" id="description-player" onEnded="onDescriptionEnd()">
  <source id="audio-source" src="#" type="audio/wav">
  Your browser does not support the audio element.
</audio>

<button type="button" id="add-description-button">Add one new generated description at current time!</button>
<button type="button" id="record-description-button">Add one new recorded description at current time!</button>
<div id="description-forms"></div>
<table id="description-audios">
  <tr>
    <th>start time (sec)</th>
    <th>inline/extended</th>
    <th>audio</th>
    <th>edit</th>
  </tr>
  <% @descriptions.each do |d| %>
    <tr>
      <td><%= d[:start_time_sec] %></td>
      <td><%= d[:inline_extended] %></td>
      <td>
        <audio controls>
          <source src="<%= d[:url] %>" type="audio/mpeg">
          Your browser does not support the audio element.
        </audio>
      </td>
      <td>
        <% if d[:generated] %>
        <%= form_with(url: "/description/edit_generated", class: "edit-description", local: false) do |form| %>
          <%= form.hidden_field :desc_id, value: d[:id] %>
          <%= form.submit "edit" %>
        <% end %>
        <% else %>
        <%= form_with(url: "/description/delete_recorded", class: "delete-description", local: false) do |form| %>
          <%= form.hidden_field :desc_id, value: d[:id] %>
          <%= form.submit "delete" %>
        <% end %>
        <% end %>

      </td>
    </tr>
  <% end %>
</table>

<%= form_with(url: "/description_track/#{@track.id}/switch_published", class: "publish-track", local: false) do |form| %>
  <%= form.hidden_field :published, value: true %>
  <%= form.submit "Publish Description Track", disabled: @track.published %>
<% end %>
<%= form_with(url: "/description_track/#{@track.id}/switch_published", class: "unpublish-track", local: false) do |form| %>
  <%= form.hidden_field :published, value: false %>
  <%= form.submit "Unpublish Description Track", disabled: !@track.published %>
<% end %>


<script>
var tag = document.createElement("script");
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName("script")[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
const vid = "<%=@video.yt_video_id%>";

let description_data = <%= @descriptions.to_json.html_safe %>

var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player("player", {
    height: "390",
    width: "640",
    videoId: vid,
    events: {
      'onReady': onPlayerIsReady,
      'onStateChange': onPlayerStateChange
    }
  });
}

// add listener for publish & unpublish
const publish = document.querySelector(".publish-track");
const publish_btn = publish.querySelector("input[name='commit']")
const unpublish = document.querySelector(".unpublish-track");
const unpublish_btn = unpublish.querySelector("input[name='commit']");
console.log("<%=@track.published%>");
publish.addEventListener("click", function(e) {
  this.submit();
  publish_btn.disabled = true;
  unpublish_btn.disabled = false;
});
unpublish.addEventListener("click", function(e) {
  this.submit();
  publish_btn.disabled = false;
  unpublish_btn.disabled = true;
});

// codes related to recorded audio below
let log = console.log.bind(console),
  id = (val) => document.getElementById(val),
  stream,
  recorder,
  counter = 1,
  chunks,
  media;

const add_description_form = function(editable={}) {
  const description_audios = document.getElementById("description-audios");
  const description_forms = document.getElementById("description-forms");
  const des_html = `<%= form_with(url: "/description/new_generated", class: "new-description", local: false) do |form| %>
    <%= form.hidden_field :track_id, value: @track.id %>
    <%= form.label :description, "time (sec):" %>
    <%= form.number_field :time %>
    <%= form.text_area :description, size: "70x2", required: true %>
    <%= form.label :voice_speed, "Voice speed:" %>
    <%= form.number_field :voice_speed, in: 0.25..4, step: 0.01, value: 1.0 %>
    <%= form.select :pause_at_start_time, [["extended", 1], ["inline", 0]], selected: 0 %>
    <%= form.select :voice_id, @voices, selected: @voices[0][1] %>
    <button type="button" id="remove-description">Remove</button>
    <%= form.submit "Add" %><% end %>`;
  description_forms.insertAdjacentHTML("beforeend", des_html);
  const new_description = description_forms.lastChild;
  // set time range
  new_description.querySelector("#time").min = 0;
  new_description.querySelector("#time").step = 0.1;
  new_description.querySelector("#time").value = player.getCurrentTime().toFixed(1);
  // set value from editable or make it default
  new_description.querySelector("#time").max = editable.start_time_sec ? player.getDuration() : editable.start_time_sec;
  if (editable.desc_text) new_description.querySelector("#description").value = editable.desc_text;
  if (editable.desc_text) new_description.querySelector("#pause_at_start_time").value = editable.pause_at_start_time;
  if (editable.desc_text) new_description.querySelector("#voice_id").value = editable.voice_id;
  if (editable.desc_text) new_description.querySelector("#voice_speed").value = editable.voice_speed;
  new_description.querySelector("#remove-description").addEventListener("click", function (e) {
    this.parentNode.remove();
  });
  console.log(new_description.querySelector("select[name='pause_at_start_time'] option[selected='selected']").innerHTML);
  new_description.addEventListener("ajax:success", function (e) {
    const desc_audio_html = `<tr>
    <td>${new_description.querySelector("input[name='time']").value}</td>
    <td>${e.detail[0].inline_extended}</td>
    <td>
      <audio controls>
        <source src="${e.detail[0].url}" type="audio/mpeg">
        Your browser does not support the audio element.
      </audio>
    </td>
    <td>
      <%= form_with(url: "/description/edit_generated", class: "edit-description", local: false) do |form| %>
        <%= form.hidden_field :desc_id %>
        <%= form.submit "edit" %>
      <% end %>
    </td></tr>`

    description_data.push(e.detail[0]);
    onSeek(player.getCurrentTime());
    
    description_audios.insertAdjacentHTML("beforeend", desc_audio_html);
    const new_audios = description_audios.lastChild;
    new_audios.querySelector("#desc_id").value = e.detail[0].id;
    new_audios.querySelector(".edit-description").addEventListener("ajax:success", function (e) {
      add_description_form(e.detail[0])
      this.parentNode.parentNode.remove();
    });
    this.remove();
  });
};

const add_record_description_form = function() {
  const description_audios = document.getElementById("description-audios");
  const description_forms = document.getElementById("description-forms");
  const des_html = `<%= form_with(url: "/description/new_recorded", class: "new-description", local: false) do |form| %>
    <%= form.hidden_field :track_id, value: @track.id %>
    <%= form.label :description, "time (sec):" %>
    <%= form.number_field :time %>
    <div id="media-record-div">
      <%= button_tag "Get Rec Permission", type: 'button', id: "toggle-recording-button", class: "btn-primary" %>
    </div>
    <%= form.hidden_field :audio_content, id: "recorded-audio-content", required: true %>
    <%= form.select :pause_at_start_time, [["extended", 1], ["inline", 0]], selected: 0 %>
    <button type="button" id="remove-description">Remove</button>
    <%= form.submit "Add", disabled: true %><% end %>`;
  description_forms.insertAdjacentHTML("beforeend", des_html);
  const new_description = description_forms.lastChild;

  let recorder_toggle_button = new_description.querySelector("#toggle-recording-button");
  let recording_div = new_description.querySelector("#media-record-div");
  recorder_toggle_button.last_download_link = null;
  recorder_toggle_button.isRecording = false;
  recorder_toggle_button.got_media_perms = false;
  recorder_toggle_button.addEventListener("click", function (e) {
    recorder_button_click_event(recorder_toggle_button, recording_div, new_description.querySelector("input[name='commit']"));
  });

  // set time range
  new_description.querySelector("#time").min = 0;
  new_description.querySelector("#time").step = 0.1;
  new_description.querySelector("#time").value = player.getCurrentTime().toFixed(1);

  new_description.querySelector("#remove-description").addEventListener("click", function (e) {
    this.parentNode.remove();
  });

  new_description.addEventListener("ajax:success", function (e) {
    const desc_audio_html = `<tr>
    <td>${new_description.querySelector("input[name='time']").value}</td>
    <td>${e.detail[0].inline_extended}</td>
    <td>
      <audio controls>
        <source src="${e.detail[0].url}" type="audio/mpeg">
        Your browser does not support the audio element.
      </audio>
    </td>
    <td>
      <%= form_with(url: "/description/delete_recorded", class: "delete-description", local: false) do |form| %>
        <%= form.hidden_field :desc_id %>
        <%= form.submit "delete" %>
      <% end %>
    </td></tr>`

    description_data.push(e.detail[0]);
    onSeek(player.getCurrentTime());

    description_audios.insertAdjacentHTML("beforeend", desc_audio_html);
    const new_audios = description_audios.lastChild;
    new_audios.querySelector("#desc_id").value = e.detail[0].id;
    new_audios.querySelector(".delete-description").addEventListener("ajax:success", function (e) {
      this.parentNode.parentNode.remove();
    });

    this.remove();
  });
};

window.addEventListener("load", () => {

  // add description form
  const add_description_button = document.getElementById(
    "add-description-button"
  );
  add_description_button.addEventListener("click", ()=> add_description_form());

  // record description form
  const record_description_button = document.getElementById(
    "record-description-button"
  );
  record_description_button.addEventListener("click", ()=> add_record_description_form());

  // add listeners for edit (generated audios)
  const edit_description_forms = document.getElementsByClassName("edit-description");
  Array.prototype.forEach.call(edit_description_forms, (f) => f.addEventListener("ajax:success", function (e) {
    add_description_form(e.detail[0])
    this.parentNode.parentNode.remove();
  }));

  // add listeners for delete (recorded audios)
  const delete_recorded_description = document.getElementsByClassName("delete-description");
  Array.prototype.forEach.call(delete_recorded_description, (f) => f.addEventListener("ajax:success", function (e) {
    this.parentNode.parentNode.remove();
  }));
});

function recorder_button_click_event(recorder_toggle_button, recording_div, commit_button) {
  media = {
    tag: "audio",
    type: "audio/wav",
    ext: ".wav",
    gUM: { audio: true },
  };

  if (!recorder_toggle_button.got_media_perms) {
    navigator.mediaDevices
      .getUserMedia(media.gUM)
      .then((_stream) => {
        stream = _stream;
        recorder = new MediaRecorder(stream);
        recorder.ondataavailable = (e) => {
          chunks.push(e.data);
          if (recorder.state == "inactive") makeLink(recording_div, recorder_toggle_button);
        };
        log("got media successfully");
        recorder_toggle_button.got_media_perms = true;
        recorder_toggle_button.textContent = "Record";
      })
      .catch(log);
  } else {
    if (recorder_toggle_button.isRecording) {
      // recorder_toggle_button.setAttribute('disabled', 'true');
      recorder_toggle_button.style.background = "#0000FF";
      recorder.stop();
      recorder_toggle_button.textContent = "Record";
      commit_button.disabled = false;
    } else {
      // recorder_toggle_button.removeAttribute('disabled');
      recorder_toggle_button.style.background = "#FF0000";
      chunks = [];
      recorder.start();
      recorder_toggle_button.textContent = "Recording...";
      commit_button.disabled = true;
    }
    recorder_toggle_button.isRecording = !recorder_toggle_button.isRecording;
  }
}

function makeLink(recording_div, recorder_toggle_button) {
  let blob = new Blob(chunks, { type: media.type });
  let url = URL.createObjectURL(blob);
  let recordedMediaParent = window.document.createElement("span");
  let mt = window.document.createElement(media.tag);
  let hf = window.document.createElement("a");

  mt.controls = true;
  mt.src = url;
  hf.href = url;
  hf.download = `${counter++}${media.ext}`;
  hf.innerHTML = `download ${hf.download}`;

  recordedMediaParent.appendChild(mt);
  recordedMediaParent.appendChild(hf);
  console.log(recorder_toggle_button.last_download_link);
  if (recorder_toggle_button.last_download_link != null) {
    recording_div.removeChild(recorder_toggle_button.last_download_link);
  }
  recording_div.appendChild(recordedMediaParent);
  recorder_toggle_button.last_download_link = recordedMediaParent;

  blobToBase64(blob, (base64) => {
    id("recorded-audio-content").value = base64;
  });
}

let blobToBase64 = function (blob, callback) {
  let reader = new FileReader();
  reader.onload = function () {
    let dataUrl = reader.result;
    let base64 = dataUrl.split(",")[1];
    callback(base64);
  };
  reader.readAsDataURL(blob);
};

//// PLAYING DESCRIPTIONS ////

let description_player = id("description-player");
let audio_source = id("audio-source");

let current_index = 0;
let timeMonitoringIntervalID = null;

let lastVolume = 100;
let isPlayingDescription = false;

// seek tracking
let lastTime = -1;

let onPlayerIsReady = (event) => {
    timeMonitoringIntervalID = setInterval(monitorTime, 100);
}

let onPlayerStateChange = (event) => {
    if (isPlayingDescription) {
        if (event.data == YT.PlayerState.PLAYING && description_data[current_index]["inline_extended"] === "extended") {
            player.pauseVideo();
        }

        if (event.data == YT.PlayerState.PAUSED && description_data[current_index]["inline_extended"] === "inline") {
            player.playVideo();
        }
    }
}

let monitorTime = () => {
    let t = player.getCurrentTime();

    // check for a seek
    if (lastTime != -1) {
        // a difference of over 500 ms counts as a seek
        if (Math.abs(t - lastTime) > 0.5) {
            // a seek occurred
            console.log("seek!");
            onSeek(t);
        }
    }
    lastTime = t;

    if (current_index >= description_data.length) return;
    let current_description = description_data[current_index];

    if (lastTime > current_description["start_time_sec"]) {
        if (timeMonitoringIntervalID != null) clearInterval(timeMonitoringIntervalID);
        isPlayingDescription = true;
        triggerDescription();
    }
}

let onSeek = (current_time) => {
    for (let i = 0; i < description_data.length; i++) {
        let this_description = description_data[i];
        if (this_description["start_time_sec"] > current_time) {
            current_index = i;
            return;
        }
    }
    current_index = description_data.length;
}

let triggerDescription = () => {
    let current_description = description_data[current_index];
    assignURLToAudioPlayer(current_description["url"]);

    if (current_description["inline_extended"] === "extended") {
        playExtendedDescription();
    } else if (current_description["inline_extended"] === "inline") {
        playInlineDescription();
    }
}

let assignURLToAudioPlayer = (url) => {
    audio_source.src = url;
    description_player.load();
}

let playExtendedDescription = () => {
    player.pauseVideo();
    description_player.play();
}

let playInlineDescription = () => {
    lastVolume = player.getVolume();
    player.setVolume(lastVolume/10);
    description_player.play();
}

let onDescriptionEnd = () => {
    let description_that_just_ended = description_data[current_index];
    current_index += 1;

    if (description_that_just_ended["inline_extended"] === "extended") {
        player.playVideo();
    } else if (description_that_just_ended["inline_extended"] === "inline") {
        player.setVolume(lastVolume);
    }

    isPlayingDescription = false;
    timeMonitoringIntervalID = setInterval(monitorTime, 100);
}

</script>